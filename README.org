#+title: pcbro: Wire-Cell PCB Anode Readout Package

This WCT user package provides some Wire-Cell Toolkit components and
support code for the PCB anode readout (pcbro) R&D and specifically
its use in the 50L test detector.

* Roadmap

The development roadmap for this package is:

- [X] generate initial package skeleton with [[https://github.com/brettviren/moo][moo]].
- [X] raw data decoder for the ~.bin~ files produced by the 50L DAQ.
- [X] a WCT "source" component that will provide this data as WCT tensors
- [X] a WCT configuration to convert ~.bin~ to ~.npz~ files
- [X] produce event displays to confirm decoder works

After this is done, most work is outside the repo:

- [ ] produce fake WCT "wires file" mostly to serve as channel map (save to ~wire-cell-data~)
- [ ] produce Garfield simulation output (Yichen)
- [ ] convert Garfield output to WCT ~.json.bz2~ file (save to ~wire-cell-data~)
- [ ] develop WCT configuration to run sigproc on ~.bin~ and save results to zero-padded ~.npz~

* Tests

** Basic raw data decoding

The basic unpacking is done by code in [[file:inc/WireCellPcbro/BinFile.h][BinFile.h]].  It can be tested like:

#+begin_example
  $ ./build/test_BinFile <test> <file.bin>
#+end_example

With ~<test>~ being one of: read, package, link, trigger and file.

The WCT component that can inject ~.bin~ files into a WCT graph is
~PcbroRawSource~ and can be tested directly like:

#+begin_example
  $ ./build/test_RawSource <file.bin>
#+end_example

** Use Wire-Cell Toolkit

Install WCT with PDSP's data files (at least) doing something like:

#+begin_example
  $ cd /path/to/wire-cell-toolkit
  $ ./wcb configure --prefix=$PREFIX --with-jsonnet=$HOME/opt/jsonnet
  $ ./wcb --notests install --install-config=all
#+end_example

Make sure ~WIRECELL_PATH~ includes WCT's installed config and data
directory and pcbro's ~cfg/~, eg:

#+begin_example
  $ export WIRECELL_PATH=$PREFIX/share/wirecell:$HOME/dev/pcbro/cfg
#+end_example

** Use WCT to decode raw data and write Numpy arrays

A ~.bin~ file can be consumed to produce a ~.npz~ file with:

#+begin_example
  $ wire-cell -l stdout -L debug -l junk.log:debug \
              -A infile=<file.bin> -A outfile=<file.npz> \
              -c cfg/cli-bin-npz.jsonnet 

  $ ipython --pylab
  In [1]: f = numpy.load("<file.npz>")
  In [2]: plt.imshow(f['frame_bin2npz_31'])
  In [3]: plt.savefig("trig31.png")
#+end_example

[[file:trig31.png]]

** Run WCT signal processing

*WARNING* this is currently using a lot of bogus configuration ripped
from PDSP and is surely wrong.  It just proves the mechanical parts
are more or less working.

#+begin_example
  $ wire-cell -l stdout -L debug -l junk.log:debug \
              -A infile=<file.bin> -A outfile=<file.npz> \
              -c cfg/cli-bin-sp-npz.jsonnet

  $ ipython --pylab
  In [1]: f = numpy.load("<file.npz>")
  In [2]: plt.imshow(f['frame_gauss0_31'])  
  In [3]: plt.savefig("trig31-gauss.png")
#+end_example

[[file:trig31-gauss.png]]

* Install

This package is not yet ready for use but it may be built against a
WCT installation doing something like:

#+begin_example
  $ ./wcb configure --prefix=/path/to/install \
        --with-wct=$HOME/opt/wct \
        [...maybe other --with-* flags...]
  $ ./wcb --notests install
  $ ./wcb --alltests
#+end_example

